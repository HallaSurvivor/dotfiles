# Many of these are EXTREMELY shamelessly taken from
# https://castel.dev/post/lecture-notes-1/
# and
# https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets


# Keep our latex preamble in a separate file
extends tex-template


###################
# Math Mode Stuff #
###################

# {{{

# Global definition of math() context. {{{
# This makes it so that math-y definitions
# only expand when we're in math mode.
#
# i.e. That should NOT autocorrect to \hat{T} in plain text,
# even though we want it to do so in math mode.
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False

def notmath():
	return not math()
endglobal 
# }}}

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet


context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
snippet inv "invserse" iA
^{-1}
endsnippet

#}}}


###############################
# Formatting and Environments #
###############################

priority 1000
snippet ... "ldots" iA
\ldots
endsnippet

snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

#fonts {{{

context "notmath()"
snippet "\*(..*)\*" "md bold" wr
\textbf{`!p snip.rv=match.group(1)`}
endsnippet


context "notmath()"
snippet "_(..*)_" "md italic" wr
\emph{`!p snip.rv=match.group(1)`}
endsnippet


snippet sf "textsf" wA
\textsf{$1} $0
endsnippet


snippet ttt "texttt" wA
\texttt{$1} $0
endsnippet


context "math()"
snippet frak "mathfrak" wA
\mathfrak{$1} $0
endsnippet


context "math()"
snippet cal "mathcal" wA
\mathcal{$1} $0
endsnippet


context "math()"
snippet bb "mathbb" wA
\mathbb{$1} $0
endsnippet

#}}}

#environments {{{

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet


snippet ali "align*" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


snippet enum "enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet


snippet sect "section" b
\section{$1}
	$0
endsnippet


snippet subsect "subsection" b
\subsection{$1}
	$0
endsnippet


snippet defn "definition" b
\begin{defn}
	$0
\end{defn}
endsnippet


snippet thm "theorem" b
\begin{thm}
	$0
\end{thm}
endsnippet


snippet proof "proof" b
\begin{proof}
	$0
\end{proof}
endsnippet


snippet '\\?(infer|prooftree|derive)' "proof tree" br
\infer
{
	${1:conclusion}
}
{
	${2:assumptions}
}
endsnippet

#}}}
