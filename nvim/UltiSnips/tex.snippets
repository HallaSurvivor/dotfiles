# Many of these are EXTREMELY shamelessly taken from
# https://castel.dev/post/lecture-notes-1/
# and
# https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets

###################
# Math Mode Stuff #
###################

# Global definition of math() context.
# This makes it so that math-y definitions
# only expand when we're in math mode.
#
# i.e. That should NOT autocorrect to \hat{T} in plain text,
# even though we want it to do so in math mode.
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet


context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
snippet inv "invserse" iA
^{-1}
endsnippet


###############################
# Formatting and Environments #
###############################

priority 1000
snippet ... "ldots" iA
\ldots
endsnippet


snippet "\*(.*)\*" "md bold" wrA
\textbf{`!p snip.rv=match.group(1)`}
endsnippet


snippet "_(.*)_" "md italic" wrA
\emph{`!p snip.rv=match.group(1)`}
endsnippet


snippet sf "textsf" wA
\textsf{$1} $0
endsnippet


snippet ttt "texttt" wA
\texttt{$1} $0
endsnippet


context "math()"
snippet frak "mathfrak" wA
\mathfrak{$1} $0
endsnippet


context "math()"
snippet cal "mathcal" wA
\mathcal{$1} $0
endsnippet


context "math()"
snippet bb "mathbb" wA
\mathbb{$1} $0
endsnippet


snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet


snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet


snippet ali "align*" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


snippet enum "enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet


snippet sect "section" b
\section{$1}
	$0
endsnippet


snippet subsect "subsection" b
\subsection{$1}
	$0
endsnippet


snippet defn "definition" b
\begin{defn}
	$0
\end{defn}
endsnippet


snippet thm "theorem" b
\begin{thm}
	$0
\end{thm}
endsnippet


snippet proof "proof" b
\begin{proof}
	$0
\end{proof}
endsnippet



###########################
# New Latex File Template #
###########################

snippet template "basic template" b
\documentclass[12pt]{article}


%% Packages

% the default margins have always felt big to me
\usepackage[margin=1in]{geometry}

% we aren't animals - we might use more than ASCII
\usepackage[utf8]{inputenc}

% obligatory math environments, symbols, and theorems
\usepackage{amsmath, amssymb, amsthm}

% moar symbols
\usepackage{stmaryrd}

% sometimes you gotta draw stuff, like _c_ommutative _d_iagrams.
\usepackage{tikz, tikz-cd}

% sometimes you gotta write code
\usepackage{listings}

% proof trees are useful
\usepackage{proof}


%% Environments

\newtheorem{thm}{Theorem}

\theoremstyle{definition}
\newtheorem{defn}{Definition}


%% Aliases and Commands

% blackboard letters
\newcommand{\N}{\mathbb{N}}
\newcommand{\Z}{\mathbb{Z}}
\newcommand{\Q}{\mathbb{Q}}
\newcommand{\R}{\mathbb{R}}

% categories
\newcommand{\Set}{\mathsf{Set}}
\newcommand{\Top}{\mathsf{Top}}
\newcommand{\Cat}{\mathsf{Cat}}
\newcommand{\Grp}{\mathsf{Grp}}
\newcommand{\Mod}{\mathsf{Mod}}
\newcommand{\FP}{\mathsf{FP}}

% "operators" (words in math mode)
\DeclareMathOperator{\Hom}{Hom}
\DeclareMathOperator{\End}{End}
\DeclareMathOperator{\Aut}{Aut}
\DeclareMathOperator{\Im}{Im}
\DeclareMathOperator{\Ker}{Ker}
\DeclareMathOperator{\Coker}{Ker}

% arrows
\newcommand{\hook}{\hookrightarrow}
\renewcommand{\lhook}{\hookleftarrow}
\newcommand{\mono}{\rightarrowtail}
\newcommand{\lmono}{\leftarrowtail}
\newcommand{\epi}{\twoheadrightarrow}
\newcommand{\lepi}{\twoheadleftarrow}

% categorical limits
\newcommand{\rlim}{\varinjlim}
\newcommand{\llim}{\varprojlim}

% analysis
\DeclareMathOperator{\dif}{d \!}
\DeclareMathOperator{\Dif}{D \!}
\newcommand{\del}{\partial}
\newcommand{\abs}[1]{\left \lvert $1 \right \rvert}
\newcommand{\norm}[1]{\left \lVert $1 \right \rVert}
\newcommand{\eval}[1]{\left . $1 \right \rvert}

% misc symbols
\newcommand{\teq}{\triangleq}
\newcommand{\fin}{\subseteq_{\text{fin}}}


%% fancy shit

% define a "danger" symbol for use when something surprising might occur
% https://tex.stackexchange.com/questions/159669/
% 	how-to-print-a-warning-sign-triangle-with-exclamation-point

\newcommand*{\TakeFourierOrnament}[1]{{%
\fontencoding{U}\fontfamily{futs}\selectfont\char#1}}
\newcommand*{\danger}{\TakeFourierOrnament{66}}


% partial derivative command (taken from commath package)
% usage: \pd[n]{f}{x}
\newcommand{\pd}[3][]{\ensuremath{
\ifinner
\tfrac{\partial{^{#1}}#2}{\partial{#3^{#1}}}
\else
\dfrac{\partial{^{#1}}#2}{\partial{#3^{#1}}}
\fi
}}

% mixed partial derivative command (taken from commath package)
% usage: \md{f}{5}{x}{3}{y}{2}
\newcommand{\md}[6]{\ensuremath{
\ifinner
\tfrac{\partial{^{#2}}#1}{\partial{#3^{#4}}\partial{#5^{#6}}}
\else
\dfrac{\partial{^{#2}}#1}{\partial{#3^{#4}}\partial{#5^{#6}}}
\fi
}}

% ordinary derivative command (taken from commath package)
% usage: \od[n]{f}{x}
\newcommand{\od}[3][]{\ensuremath{
\ifinner
\tfrac{\dif{^{#1}}#2}{\dif{#3^{#1}}}
\else
\dfrac{\dif{^{#1}}#2}{\dif{#3^{#1}}}
\fi
}}



%% project specific aliases (if they exist)
\IfFileExists{../preamble.tex}{\input{../preamble.tex}}{}


%% Heading
\author{Chris Grossack}
\title{}

\begin{document}

	\maketitle

	$0

\end{document}
endsnippet
