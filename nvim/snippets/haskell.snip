snippet lang
alias LANGUAGE, {-# LANGUAGE, {-# LANG
	{-# LANGUAGE ${0:OverloadedStrings} #-}

snippet ghc
alias OPTIONS_GHC, {-# OPTIONS_GHC, {-# OPTIONS
	{-# OPTIONS_GHC ${0:-fno-warn-unused-imports} #-}

snippet info
	-- |
	-- Module      :  ${1:`substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')`}
	-- Copyright   :  ${2:Author} ${3:2011-2012}
	-- License     :  ${4:BSD3}
	--
	-- Maintainer  :  ${5:email@something.com}
	-- Stability   :  ${6:experimental}
	-- Portability :  ${7:unknown}
	--
	-- ${0:Description}
	--

snippet import
	import ${0:Data.Text}

snippet import(
alias importOnly
abbr import ... (..)
	import           ${1:Data.Text} (${0:head})

snippet impq
alias importq
abbr import ... as ...
	import qualified ${1:Data.Text} as ${0:T}

snippet inst
alias instance
	instance ${1:Monoid} ${2:Type} where
		${0}

snippet ty
alias type
	type ${1:Type} = ${0:Type}

snippet da
alias data
	data ${1:Type} = ${2:$1} ${0:Int}

snippet newtype
	newtype ${1:Type} = ${2:$1} ${0:Int}

snippet class
	class ${1:Class} a where
		${0}

snippet module
	module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` 
  (
	) where
	`expand('%') =~ 'Main' ? "\nmain :: IO ()\nmain = undefined" : ""`

snippet main
	main :: IO ()
	main = ${0:undefined}

snippet fn
	${1:fn} :: ${2:a}
	$1 = ${0:undefined}

snippet \
	\\${1:x} -> ${0:expression}

snippet (\
	(\\${1:x} -> ${0:expression})

snippet doc
	{-| ${0}
 	 -}
