#!/usr/bin/env bash
# Christopher Grossack's functions
#
# I tend not to use aliases as functions are safer 
# (aliases are nothing but string substitutions)
#
# See the rest of my dotfiles here:
# https://github.com/HallaSurvivor/dotfiles

###########
# Aliases #
###########

# Conveniences
function cdp { cd ~/Documents/programming; }
function cdd { cd ~/dotfiles; }
function .. { cd ..; }
function dl { cd ~/Downloads; }
function la { ls -a; } #show hidden files
function reload { source ~/.bashrc; } #reload bashrc
function update { git add -u; git status; } #update a git repo
function gs { git status; }

# Jokes
function clera { sl; }
function lear { sl; }
function clea { sl; }
function starWars { telnet towel.blinkenlights.nl; }

#Interesting command to see top 10 called commands
function checkHistory { history | awk '{print \$2}' | awk 'BEGIN {FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail | sort -nr; }

#############
# Functions #
#############

#mkdir then cd immediately
function mcd
{
  mkdir -p $1;
  cd $1;
}

#mv then cd immediately
function vcd
{
  if (($# != 2)); then
    echo "Usage: vcd <current path> <destination>";
  elif [[ -f $2 ]]; then
    echo "Destination must be a directory, not a file.";
  else
    mv $1 $2;
    cd $2;
  fi
}

#mv to programming folder.
function mvp
{
  programming=~/Documents/programming

  if [[ -z $1 ]]; then
    echo "Usage: mvp <file to move> [subdirectory]";
  elif [[ -z $2 ]]; then
    mv $1 $programming;
  else
    if [[ -d "$programming/$2" ]]; then
      mv $1 $programming/$2;
    else
      mv $1 $programming;
    fi
  fi
}

# Simple calculator.
# Shamelessly taken from:
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function calc() 
{
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Determine filesize or directory size.
# Again, shamelessly taken from:
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function fs() 
{
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Automatically symlink something in dotfiles.
function dot()
{
  ln -s ~/dotfiles/"$1" ~/."$1";
}
