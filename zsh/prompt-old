# Chris Grossack's ps1 config
#
# [branchname] (venvname) dir >
#
# branchname is colored:
#   Green  - clean working copy
#   Yellow - untracked files
#   Red    - uncommitted changes (doesn't care about staging)
#
#   If branch is master, the name is omitted, 
#   leaving only a colored square.
#
#
# venvname is the python venv currently sourced.
#
#
# NOTE: I also export two functions, `ps1_off` and `ps1_on`
#
#     These behave in the intuitive way, turning off
#     the fancy parts of the prompt, because with large
#     repos, parsing the git status output can be slow.
# 
#
# See the rest of my dotfiles here:
# https://github.com/HallaSurvivor/dotfiles

#############
# Build PS1 #
#############

# This function is shamelessly taken almost directly from:
# http://www.opinionatedprogrammer.com
#   /2011/01/colorful-bash-prompt-reflecting-git-status/
# I've made a few edits to make it more customizable,
# as well as (imo) more legible.
#
# Also, as of 2021, I've edited it to work with zsh instead of bash
#
# TODO: make this use git --porcelain
function git_prompt() {

  #ansi codes for which color to use when
  local up_to_date=46
  local untracked=43
  local modified=45
  local text_color=30

  local git_status="`git status -unormal 2>&1`"
  if ! [[ "$git_status" =~ not\ a\ git\ repo ]]; then

    #choose background color
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
      local background="$up_to_date"
    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
      local background="$untracked"
    else
      local background="$modified"
    fi

    #see if we're on master or not
    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
      branch=${BASH_REMATCH[1]}
      test "$branch" != master || branch=' '
    else
      #if we have a detached head, just say HEAD
      branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)"
    fi

    echo -n '\[\e[0;'"$text_color"';'"$background"'m\]'"$branch"'\[\e[0m\] '
  fi
}

# This function is inspired by the code here:
# https://gist.github.com/miki725/9783474
function venv_prompt() {
  if [ -n "$VIRTUAL_ENV" ]; then
    echo -n "(`basename \"$VIRTUAL_ENV\"`) "
  fi
}

PROMPT='%n@%m: %. > '

function prompt_command() {
  PS1="`git_prompt``venv_prompt`"$PROMPT
}

##############
# Toggle PS1 #
##############

function ps1_on { export PROMPT_COMMAND=prompt_command; }
function ps1_off { export PROMPT_COMMAND=""; export PS1=$PROMPT; }

# Turn it on by default
ps1_on
