# Christopher Grossack's gitconfig
#
# See the rest of my dotfiles here:
# https://github.com/HallaSurvivor/dotfiles

# Identification
[user]
  name  = Christopher Grossack
  email = HallaSurvivor@gmail.com
  signingkey = B437CDCC1B8F8B8CDBB1DAE0D1355AE6ED375068

[github]
  user = HallaSurvivor

[color]
  # Use color whenever possible
  ui = auto

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old  = red          # deleted files
  new  = green        # added files

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[core]
  # Things we universally don't want to commit,
  excludesfile = ~/.gitignore_global

  # Treat spaces before tabs and any trailing whitespace as an error
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[apply]
  # Automatically fix whitespace errors
  whitespace = fix

[commit]
  # Sign any commits as being done by me.
  gpgsign = true

[merge]
  # Include a summary of merge changes in the merge commit message
  log = true

# Aliases and conveniences
# Many of these are shamelessly stolen from 
# http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
# but some are my own, or have been modified by me.
[alias]
  # basic aliases
  s  = status
  br = branch
  cm = commit -m
  co = checkout
  cp = cherry-pick

  # update the directories given, then show them to double check
  a = add -A

  # Show a graph of the commit history, shown as follows:
  # commit_hash (branches,tags) commit_message [author] (relative time since commit)
  #   yellow          red            white       blue              green
  #
  # I often modify this by typing either
  # git ls --numstat
  # or
  # git ls --all
  #
  # numstat will show which files were changed
  # all will show this information for ALL branches, not just the current one
  ls = log --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\\ %Cgreen(%cr)" --decorate

  # Grep for a string in all the filenames in the repo
  f = "!git ls-files | grep -iE"

  # Grep for a string inside all the files in the repo
  gr = grep -IiE

  # Ignore changes to a file
  ignore = update-index --assume-unchanged

  # Stop ignoring changes to a file
  unignore = update-index --no-assume-unchanged

  # Show ignored files
  ignored = "!git ls-files -v | grep ^h | cut -c 3-"
